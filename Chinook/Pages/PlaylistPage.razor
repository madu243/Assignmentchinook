@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Contracts;
@using Chinook.Services;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<div><h1>Playlist <strong>@Playlist.Name</strong></h1>
<a href="#" class="m-1" title="Edit name of this playlist" @onclick="@(() => EditPlayList(@Playlist.PlaylistId))" @onclick:preventDefault><i class="bi bi-pencil"></i></a>
<a href="#" class="m-1" title="Dlete this playlist" @onclick="@(() => DeletePlayList(@Playlist.PlaylistId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
</div>
@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
    <Loading />
}
else if (playlistNameChangeService.Value != null)
{
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Track</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                        <tr>
                            <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                            <td>
                                <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                                    <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                                </div>
                            </td>
                        </tr>
            }
            </tbody>
        </table>
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IPlaylistService playlistService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }
    @inject PlaylistNameChangeService playlistNameChangeService;

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private string newEditPlaylistName;
    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();
        playlistNameChangeService.OnStateChange += () => StateHasChanged();
        await InvokeAsync(StateHasChanged);

        Playlist = playlistService.GetPlayList(PlaylistId, CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void EditPlayList(long playListId)
    {
        PlaylistDialog.Open();
    }

    public void DeletePlayList(long playListId)
    {
        playlistService.DeletePlayList(playListId);
        List<Chinook.ClientModels.Playlist> Playlistnew = playlistService.GetUserCreatedPlayList(CurrentUserId);
        playlistNameChangeService.SetValue(Playlistnew);
    }
    private void AddEditPlaylist()
    {
        playlistService.EditPlayList(Playlist.PlaylistId, newEditPlaylistName);
        List<Chinook.ClientModels.Playlist> Playlistnew = playlistService.GetUserCreatedPlayList(CurrentUserId);
        playlistNameChangeService.SetValue(Playlistnew);
        PlaylistDialog.Close();
    }
    private void FavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        playlistService.FavouriteTrack(trackId);
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
        playlistService.UnFavouriteTrack(trackId);
    }

    private void RemoveTrack(long trackId)
    {
        playlistService.RemoveTrack(trackId);
        Playlist = playlistService.GetPlayList(PlaylistId, CurrentUserId);
        CloseInfoMessage();

    }

    
    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
<Modal @ref="PlaylistDialog">
    <Title>
        Edit playlist Name
    </Title>
    <Body>

        <div class="form-group mb-2">
            <label for="editplaylist">Edit playlist name</label>
            <input type="text" id="NewPlaylist" 
                @bind="@newEditPlaylistName"
                class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddEditPlaylist">Save</button>
    </Footer>
</Modal>